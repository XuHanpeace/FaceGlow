# FaceGlow 项目编码规范

## 项目概述
FaceGlow是一个基于React Native的跨平台AI换脸应用，使用CloudBase作为后端服务。

## 编码标准

### 基本规则
- 始终使用中文回复
- 所有新代码必须使用TypeScript
- 遵循React Native最佳实践
- 保持代码格式一致性
- 使用有意义的变量和函数名

### 文件组织
- 服务文件放在`src/services/`目录
- 使用正确的TypeScript接口和类型
- 通过index文件导出服务
- 保持清晰的关注点分离

### 数据库和API规则
- 所有HTTP请求使用axios（禁止使用fetch API）
- 始终进行错误处理和检查
- 使用CloudBase HTTP API端点
- 调用数据库服务前必须设置访问令牌
- API调用前验证数据

### React Native特定规则
- 使用函数组件和hooks
- 实现适当的错误边界
- 适当处理加载状态
- 尽可能使用React Native特定组件

### 错误处理
- 始终检查响应中的`success`字段
- 提供用户友好的错误消息
- 对异步操作使用try-catch块
- 记录错误以便调试

### 测试和文档
- 为新服务创建测试文件
- 记录复杂函数和API
- 对公共方法使用JSDoc注释
- 为新功能提供使用示例

## AI助手行为规范

### 创建代码时
- 使用现有模式和约定
- 实现正确的TypeScript类型
- 为所有操作添加错误处理
- 遵循已建立的服务结构

### 修改代码时
- 保持现有功能
- 根据需要更新类型和接口
- 保持向后兼容性
- 彻底测试更改

### 文档管理
- 仅在明确要求时创建markdown文件
- 保持文档简洁实用
- 专注于使用示例和规则
- 更新现有文档而不是创建新的

### 文件管理
- 不创建不必要的文档文件
- 专注于代码质量和功能
- 使用Rules文件作为项目指导
- 保持项目结构清洁有序

## 禁止行为
- 不要使用fetch API（使用axios代替）
- 不要忽略错误处理
- 不要创建过多的文档文件
- 不要在没有理由的情况下破坏现有功能
- 不要在没有适当理由的情况下使用any类型

## 推荐行为
- 使用带有适当拦截器的axios
- 实现全面的错误处理
- 遵循TypeScript最佳实践
- 保持代码清洁可读
- 使用现有的服务模式
description:
globs:
alwaysApply: true
---
